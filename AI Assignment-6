{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyM55rvTZseVdnh1aTR3I16c",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ujjvalasindhu/AI/blob/main/AI%20Assignment-6\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "odvd1n1U81NB",
        "outputId": "e0bd43e6-5710-4431-fc59-4d07751a3930"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "data=pd.read_excel('assignment4.xls')\n",
        "data\n",
        "maxX=np.max(data['X'])\n",
        "maxY=np.max(data['Y'])\n",
        "minX=np.min(data['X'])\n",
        "minY=np.min(data['Y'])\n",
        "normalized_x=[]\n",
        "for i in range(data.shape[0]):\n",
        "    normalized_x.append((data['X'][i]-minX)/(maxX-minX))\n",
        "normalized_y=[]\n",
        "for i in range(data.shape[0]):\n",
        "    normalized_y.append((data['Y'][i]-minY)/(maxY-minY))\n",
        "data['X']=normalized_x\n",
        "data['Y']=normalized_y\n",
        "data\n",
        "from sklearn.model_selection import train_test_split\n",
        "x=data['X']\n",
        "y=data['Y']\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=10)\n",
        "def gradient(m1,m2,c,x,y):\n",
        "    m1_deriv=-1*(y-m1*x*x-m2*x-c)*x*x\n",
        "    m2_deriv=-1*(y-m1*x*x-m2*x-c)*x\n",
        "    c_deriv=-1*(y-m1*x*x-m2*x-c)\n",
        "    return m1_deriv,m2_deriv,c_deriv\n",
        "\n",
        "m1=np.random.uniform(-10,10)\n",
        "m2=np.random.uniform(-10,10)\n",
        "c=np.random.uniform(-10,10)\n",
        "eta=0.5\n",
        "max_iter=1000\n",
        "\n",
        "for iter in range(max_iter):\n",
        "    for sample in range(x_train.shape[0]):\n",
        "        delm1,delm2,delc=gradient(m1, m2, c, x_train.iloc[sample], y_train.iloc[sample])\n",
        "        m1=m1-eta*delm1\n",
        "        m2=m2-eta*delm2\n",
        "        c=c-eta*delc\n",
        "print('model parameterS m1, m2 and c',m1,m2,c)\n",
        "y_pred_train = []\n",
        "for i in x_train:\n",
        "    y_pred = m1*i*i + m2*i + c\n",
        "    y_pred_train.append(y_pred)\n",
        "y_pred_train = np.array(y_pred_train)\n",
        "y_pred_test = []\n",
        "for i in x_test:\n",
        "    y_pred = m1*i*i + m2*i + c\n",
        "    y_pred_test.append(y_pred)\n",
        "y_pred_test = np.array(y_pred_test)\n",
        "y_train_denorm=[]\n",
        "y_train_pred_denorm=[]\n",
        "for i in range(y_train.shape[0]):\n",
        "    y_train_denorm.append(y_train.iloc[i]*(maxY-minY)+minY)\n",
        "    y_train_pred_denorm.append(y_pred_train[i]*(maxY-minY)+minY)\n",
        "y_pred_train=y_train_pred_denorm\n",
        "y_train=y_train_denorm\n",
        "y_test_denorm=[]\n",
        "y_test_pred_denorm=[]\n",
        "for i in range(y_test.shape[0]):\n",
        "    y_test_denorm.append(y_test.iloc[i]*(maxY-minY)+minY)\n",
        "    y_test_pred_denorm.append(y_pred_test[i]*(maxY-minY)+minY)\n",
        "y_pred_test=y_test_pred_denorm\n",
        "y_test=y_test_denorm\n",
        "import math\n",
        "from sklearn.metrics import mean_squared_error \n",
        "from sklearn.metrics import mean_absolute_error\n",
        "rmse = math.sqrt(mean_squared_error(y_train, y_pred_train)) \n",
        "print('Root mean square error', rmse) \n",
        "mse = (mean_squared_error(y_train, y_pred_train)) \n",
        "print('Mean square error', mse) \n",
        "mae=mean_absolute_error(y_train, y_pred_train)\n",
        "print('Mean absolute error', mae)\n",
        "rmse = math.sqrt(mean_squared_error(y_test, y_pred_test)) \n",
        "print('Root mean square error', rmse) \n",
        "mse = (mean_squared_error(y_test, y_pred_test)) \n",
        "print('Mean square error', mse) \n",
        "mae=mean_absolute_error(y_test, y_pred_test)\n",
        "print('Mean absolute error', mae)\n",
        "\n"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "*** No CODEPAGE record, no encoding_override: will use 'ascii'\n",
            "model parameterS m1, m2 and c -0.5627494471328263 0.1837345649731326 0.5664752247124053\n",
            "Root mean square error 50.84028304059249\n",
            "Mean square error 2584.734379647556\n",
            "Mean absolute error 42.04309947898482\n",
            "Root mean square error 59.88977842373792\n",
            "Mean square error 3586.785559644424\n",
            "Mean absolute error 55.58216475556286\n"
          ]
        }
      ]
    }
  ]
}